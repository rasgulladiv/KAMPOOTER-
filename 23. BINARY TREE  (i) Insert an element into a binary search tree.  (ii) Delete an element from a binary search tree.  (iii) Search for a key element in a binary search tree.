#include <stdio.h>
#include <stdlib.h>

// Define the structure for a binary search tree node
struct TreeNode {
    int key;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new tree node
struct TreeNode* createNode(int value) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->key = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the BST
struct TreeNode* insertNode(struct TreeNode* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->key) {
        root->left = insertNode(root->left, value);
    } else if (value > root->key) {
        root->right = insertNode(root->right, value);
    }
    return root;
}

// Function to search for a key in the BST
struct TreeNode* searchNode(struct TreeNode* root, int target) {
    if (root == NULL || root->key == target) {
        return root;
    }
    if (target < root->key) {
        return searchNode(root->left, target);
    }
    return searchNode(root->right, target);
}

// Function to delete a node from the BST
struct TreeNode* deleteNode(struct TreeNode* root, int value) {
    if (root == NULL) {
        return root;
    }
    if (value < root->key) {
        root->left = deleteNode(root->left, value);
    } else if (value > root->key) {
        root->right = deleteNode(root->right, value);
    } else {
        if (root->left == NULL) {
            struct TreeNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct TreeNode* temp = root->left;
            free(root);
            return temp;
        }
        struct TreeNode* temp = root->right;
        while (temp->left != NULL) {
            temp = temp->left;
        }
        root->key = temp->key;
        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}

// Function to display the BST (in-order traversal)
void displayInOrder(struct TreeNode* root) {
    if (root != NULL) {
        displayInOrder(root->left);
        printf("%d ", root->key);
        displayInOrder(root->right);
    }
}

int main() {
    struct TreeNode* root = NULL;
    int choice, value;

    while (1) {
        printf("\nBinary Search Tree Operations:\n");
        printf("1. Insert a node\n");
        printf("2. Search for a key\n");
        printf("3. Delete a node\n");
        printf("4. Display the BST (in-order)\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter a value to insert: ");
                scanf("%d", &value);
                root = insertNode(root, value);
                break;
            case 2:
                printf("Enter the key to search: ");
                scanf("%d", &value);
                if (searchNode(root, value) != NULL) {
                    printf("Key %d found in the BST.\n", value);
                } else {
                    printf("Key %d not found in the BST.\n", value);
                }
                break;
            case 3:
                printf("Enter a value to delete: ");
                scanf("%d", &value);
                root = deleteNode(root, value);
                break;
            case 4:
                printf("BST (in-order): ");
                displayInOrder(root);
                printf("\n");
                break;
            case 5:
                printf("Exiting the program.\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
