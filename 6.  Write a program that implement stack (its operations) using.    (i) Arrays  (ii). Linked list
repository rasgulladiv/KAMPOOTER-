#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Stack implementation using an array
struct Stack {
    int top;
    int items[MAX_SIZE];
};

// Initialize an empty stack
void initialize(struct Stack* stack) {
    stack->top = -1;
}

// Push an item onto the stack
void push(struct Stack* stack, int item) {
    if (stack->top == MAX_SIZE - 1) {
        printf("Stack overflow!\n");
        exit(1);
    }
    stack->items[++stack->top] = item;
}

// Pop an item from the stack
int pop(struct Stack* stack) {
    if (stack->top == -1) {
        printf("Stack underflow!\n");
        exit(1);
    }
    return stack->items[stack->top--];
}

// Get the top item from the stack without removing it
int peek(struct Stack* stack) {
    return stack->items[stack->top];
}

// Check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

int main() {
    struct Stack stack;
    initialize(&stack);

    int choice, data;

    while (1) {
        printf("\nStack Operations:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to push: ");
                scanf("%d", &data);
                push(&stack, data);
                break;
            case 2:
                printf("Popped: %d\n", pop(&stack));
                break;
            case 3:
                printf("Top element: %d\n", peek(&stack));
                break;
            case 4:
                printf("Stack contents: ");
                for (int i = 0; i <= stack.top; ++i)
                    printf("%d ", stack.items[i]);
                printf("\n");
                break;
            case 5:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}




///////////////////////////////////          USING  LINKED LIST                     ///////////////////////////////////////////////////////////////////////////////////////////


#include <stdio.h>
#include <stdlib.h>

// Define the structure for a stack node
struct Node {
    int data;
    struct Node* next;
};

// Initialize an empty stack
struct Node* initialize() {
    return NULL;
}

// Push an item onto the stack
struct Node* push(struct Node* top, int item) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = item;
    newNode->next = top;
    return newNode;
}

// Pop an item from the stack
struct Node* pop(struct Node* top) {
    if (top == NULL) {
        printf("Stack underflow!\n");
        exit(1);
    }
    struct Node* temp = top;
    top = top->next;
    free(temp);
    return top;
}

// Get the top item from the stack without removing it
int peek(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        exit(1);
    }
    return top->data;
}

// Check if the stack is empty
int isEmpty(struct Node* top) {
    return top == NULL;
}

// Display the contents of the stack
void display(struct Node* top) {
    if (isEmpty(top)) {
        printf("Stack is empty.\n");
        return;
    }
    printf("Stack contents: ");
    while (top != NULL) {
        printf("%d ", top->data);
        top = top->next;
    }
    printf("\n");
}

int main() {
    struct Node* top = initialize();

    int choice, data;

    while (1) {
        printf("\nStack Operations:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to push: ");
                scanf("%d", &data);
                top = push(top, data);
                break;
            case 2:
                top = pop(top);
                printf("Item popped from the stack.\n");
                break;
            case 3:
                printf("Top element of the stack: %d\n", peek(top));
                break;
            case 4:
                display(top);
                break;
            case 5:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    }

    return 0;
}






