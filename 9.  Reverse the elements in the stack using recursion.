#include <stdio.h>
#include <stdlib.h>

// Structure for a stack node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new stack node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to push an item onto the stack
void push(struct Node** top, int item) {
    struct Node* newNode = createNode(item);
    newNode->next = *top;
    *top = newNode;
}

// Function to pop an item from the stack
int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow!\n");
        exit(1);
    }
    struct Node* temp = *top;
    int poppedItem = temp->data;
    *top = (*top)->next;
    free(temp);
    return poppedItem;
}

// Function to insert an item at the bottom of the stack
void insertAtBottom(struct Node** top, int item) {
    if (*top == NULL) {
        push(top, item);
    } else {
        int temp = pop(top);
        insertAtBottom(top, item);
        push(top, temp);
    }
}

// Function to reverse the stack using recursion
void reverse(struct Node** top) {
    if (*top != NULL) {
        int temp = pop(top);
        reverse(top);
        insertAtBottom(top, temp);
    }
}

// Function to display the stack
void display(struct Node* top) {
    printf("Stack contents: ");
    while (top != NULL) {
        printf("%d ", top->data);
        top = top->next;
    }
    printf("\n");
}

int main() {
    struct Node* top = NULL;
    int n, data;

    printf("Enter the number of elements in the stack: ");
    scanf("%d", &n);

    printf("Enter the elements for the stack:\n");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &data);
        push(&top, data);
    }

    printf("Original stack:\n");
    display(top);

    reverse(&top);

    printf("Reversed stack:\n");
    display(top);

    return 0;
}
