#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100 // Maximum size of the stack

// Define the stack structure
struct Stack {
    int arr[MAX_SIZE];
    int top; // Index of the top element
};

// Function to initialize an empty stack
void initializeStack(struct Stack* stack) {
    stack->top = -1; // Initialize top to -1 (empty stack)
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow: Cannot push more elements.\n");
        return;
    }
    stack->arr[++stack->top] = value;
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow: Cannot pop from an empty stack.\n");
        return -1; // Return a placeholder value
    }
    return stack->arr[stack->top--];
}

// Function to peek at the top element
int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
        return -1; // Return a placeholder value
    }
    return stack->arr[stack->top];
}

// Function to reverse the stack
void reverseStack(struct Stack* stack) {
    // Implement the reversal logic here
    // ...
}

// Function to find the maximum power m element in the stack
int maxPowerM(struct Stack* stack, int m) {
    // Implement the logic to find the maximum power m element
    // ...
    return -1; // Return a placeholder value
}

int main() {
    struct Stack stack;
    initializeStack(&stack);

    int choice, value, m;

    while (1) {
        printf("\nStack Operations:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek Top Element\n");
        printf("4. Reverse Stack\n");
        printf("5. Max Power M Element\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter a value to push onto the stack: ");
                scanf("%d", &value);
                push(&stack, value);
                break;
            case 2:
                printf("Popped element: %d\n", pop(&stack));
                break;
            case 3:
                printf("Top element: %d\n", peek(&stack));
                break;
            case 4:
                reverseStack(&stack);
                printf("Stack reversed.\n");
                break;
            case 5:
                printf("Enter the value of m: ");
                scanf("%d", &m);
                printf("Max Power M Element: %d\n", maxPowerM(&stack, m));
                break;
            case 6:
                printf("Exiting the program.\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
